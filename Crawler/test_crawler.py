#!/usr/bin/env python3
import asyncio
import logging
from Crawler.crawler_controller import CrawlerController, CrawlerConfig

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('crawler_test.log'),
        logging.StreamHandler()
    ]
)

async def test_crawler():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫—Ä–∞—É–ª–µ—Ä –Ω–∞ –ø—Ä–æ—Å—Ç–æ–º —Å–∞–π—Ç–µ"""
    
    config = CrawlerConfig(
        max_depth=1,
        max_pages=5,
        concurrent_requests=2,
        request_delay=1.0,
        timeout=10,
        user_agent="TestCrawler/1.0",
        respect_robots_txt=True
    )
    
    controller = CrawlerController(config)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ travel.yandex.ru
    test_url = "https://travel.yandex.ru"
    
    print(f"üï∑Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—Ä–∞—É–ª–µ—Ä –Ω–∞ {test_url}")
    print("üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    print(f"   - –ì–ª—É–±–∏–Ω–∞: {config.max_depth}")
    print(f"   - –ú–∞–∫—Å. —Å—Ç—Ä–∞–Ω–∏—Ü: {config.max_pages}")
    print(f"   - –ó–∞–¥–µ—Ä–∂–∫–∞: {config.request_delay}s")
    print(f"   - –¢–∞–π–º–∞—É—Ç: {config.timeout}s")
    print()
    
    try:
        site_tree = await controller.start_crawling(test_url)
        
        print("‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        stats = site_tree.get_stats()
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   - –í—Å–µ–≥–æ —É–∑–ª–æ–≤: {stats['total_nodes']}")
        print(f"   - –í–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏: {stats['external_links']}")
        print(f"   - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞: {stats['max_depth']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        print(f"\nüìÑ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:")
        for url, node in site_tree.nodes.items():
            title = node.metadata.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')[:50]
            print(f"   [{node.status_code}] {url} - {title}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

if __name__ == "__main__":
    asyncio.run(test_crawler())