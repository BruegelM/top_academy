#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –≤ Telegram –∫–∞–Ω–∞–ª
"""

import asyncio
import logging
from datetime import datetime
from telethon import TelegramClient
from telethon.errors import SessionPasswordNeededError, FloodWaitError
from telethon.tl.functions.channels import CreateChannelRequest
from telethon.tl.functions.account import UpdateUsernameRequest
from config import TELEGRAM_API_ID, TELEGRAM_API_HASH, SESSION_PATH
from database import DatabaseManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class TelegramPublisher:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –≤ Telegram –∫–∞–Ω–∞–ª"""
    
    def __init__(self, target_channel=None):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ç–æ—Ä–∞
        self.client = TelegramClient(SESSION_PATH + "_publisher", TELEGRAM_API_ID, TELEGRAM_API_HASH)
        self.target_channel = target_channel
        
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram"""
        try:
            await self.client.start()
            logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: {e}")
            return False
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Telegram"""
        if self.client.is_connected():
            await self.client.disconnect()
            logger.info("–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Telegram")
    
    async def create_summary_channel(self, channel_name="AI –°–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è"):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª
            result = await self.client(CreateChannelRequest(
                title=channel_name,
                about="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é AI",
                megagroup=False  # –ö–∞–Ω–∞–ª, –∞ –Ω–µ –≥—Ä—É–ø–ø–∞
            ))
            
            channel = result.chats[0]
            logger.info(f"–°–æ–∑–¥–∞–Ω –∫–∞–Ω–∞–ª: {channel_name} (ID: {channel.id})")
            
            # –î–µ–ª–∞–µ–º –∫–∞–Ω–∞–ª –ø—É–±–ª–∏—á–Ω—ã–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            username = f"ai_summary_{datetime.now().strftime('%Y%m%d')}"
            try:
                await self.client(UpdateUsernameRequest(
                    channel=channel,
                    username=username
                ))
                logger.info(f"–ö–∞–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: @{username}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å username –¥–ª—è –∫–∞–Ω–∞–ª–∞: {e}")
            
            return channel.id
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
            return None
    
    async def send_summary(self, channel_target, original_post, analysis_result=None, source_channel="Unknown"):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π
            if analysis_result is None:
                analysis_result = {
                    'analysis_text': '–ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω',
                    'model_used': 'None',
                    'status': 'skipped'
                }
            message = self._format_summary_message(original_post, analysis_result, source_channel)
            
            # –í—Å–µ–≥–¥–∞ —Ä–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            messages = self._split_long_message(message, max_length=4000)
            
            for i, msg_part in enumerate(messages):
                await self.client.send_message(channel_target, msg_part, parse_mode='markdown')
                if i < len(messages) - 1:  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π
                    await asyncio.sleep(2)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            
            logger.info(f"–°–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª {channel_target} ({len(messages)} —á–∞—Å—Ç–µ–π)")
            return True
            
        except FloodWaitError as e:
            logger.warning(f"Flood wait: –æ–∂–∏–¥–∞–Ω–∏–µ {e.seconds} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(e.seconds)
            return await self.send_summary(channel_target, original_post, analysis_result, source_channel)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    async def send_summary_post(self, channel_target, summary_post, analysis_result, source_channel="Unknown"):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∞–º–º–∞—Ä–∏ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–º–º–∞—Ä–∏
            message = self._format_summary_post_message(summary_post, analysis_result, source_channel)
            
            # –í—Å–µ–≥–¥–∞ —Ä–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            messages = self._split_long_message(message, max_length=4000)
            
            for i, msg_part in enumerate(messages):
                await self.client.send_message(channel_target, msg_part, parse_mode='markdown')
                if i < len(messages) - 1:  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π
                    await asyncio.sleep(2)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            
            logger.info(f"–°–∞–º–º–∞—Ä–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {channel_target} ({len(messages)} —á–∞—Å—Ç–µ–π)")
            return True
            
        except FloodWaitError as e:
            logger.warning(f"Flood wait: –æ–∂–∏–¥–∞–Ω–∏–µ {e.seconds} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(e.seconds)
            return await self.send_summary_post(channel_target, summary_post, analysis_result, source_channel)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∞–º–º–∞—Ä–∏: {e}")
            return False
    
    def _split_long_message(self, message, max_length=4000):
        """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∞–Ω–∞–ª–∏–∑–∞"""
        if len(message) <= max_length:
            return [message]
        
        parts = []
        current_part = ""
        lines = message.split('\n')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏ (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π)
        header_lines = []
        for i, line in enumerate(lines):
            if line.startswith('üìä **–ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –í–õ–ò–Ø–ù–ò–Ø –ù–ê –Ø–ù–î–ï–ö–° –ü–£–¢–ï–®–ï–°–¢–í–ò–Ø:**'):
                header_lines = lines[:i+1]  # –í–∫–ª—é—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–Ω–∞–ª–∏–∑–∞
                break
            elif i < 10:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                continue
        
        for i, line in enumerate(lines):
            # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç
            if len(current_part) + len(line) + 1 > max_length:
                if current_part:
                    parts.append(current_part.strip())
                    
                    # –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    if len(parts) > 1 and any('–ê–ù–ê–õ–ò–ó –í–õ–ò–Ø–ù–ò–Ø' in part for part in parts):
                        current_part = f"ü§ñ **–ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ {len(parts)})**\n\n{line}\n"
                    else:
                        current_part = line + '\n'
                else:
                    # –ï—Å–ª–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ—ë –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
                    if '. ' in line and len(line) > max_length:
                        sentences = line.split('. ')
                        temp_line = ""
                        for sentence in sentences:
                            if len(temp_line) + len(sentence) + 2 > max_length:
                                if temp_line:
                                    parts.append(temp_line.strip())
                                temp_line = sentence + '. '
                            else:
                                temp_line += sentence + '. '
                        current_part = temp_line
                    else:
                        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å–∏–º–≤–æ–ª–∞–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
                        while len(line) > max_length:
                            parts.append(line[:max_length])
                            line = line[max_length:]
                        current_part = line + '\n'
            else:
                current_part += line + '\n'
        
        if current_part.strip():
            parts.append(current_part.strip())
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ —á–∞—Å—Ç–µ–π –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
        if len(parts) > 1:
            for i in range(len(parts)):
                if i == 0:
                    parts[i] += f"\n\n_–ß–∞—Å—Ç—å 1 –∏–∑ {len(parts)}_"
                else:
                    parts[i] += f"\n\n_–ß–∞—Å—Ç—å {i+1} –∏–∑ {len(parts)}_"
        
        return parts
    
    def _format_summary_message(self, original_post, analysis_result, source_channel):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π"""
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
        analysis_text = analysis_result.get('analysis_text', '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
        model_used = analysis_result.get('model_used', 'Unknown')
        status = analysis_result.get('status', 'unknown')
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
        original_content = original_post.get('content', '')
        lines = original_content.split('\n')
        title = lines[0] if lines else original_content
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç
        telegram_message_id = original_post.get('telegram_message_id')
        channel_username = original_post.get('channel_username', source_channel)
        
        # –£–±–∏—Ä–∞–µ–º @ –∏–∑ username –µ—Å–ª–∏ –µ—Å—Ç—å
        if channel_username and channel_username.startswith('@'):
            channel_username = channel_username[1:]
        
        post_link = f"https://t.me/{channel_username}/{telegram_message_id}" if telegram_message_id and channel_username else "–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        date_published = original_post.get('date_published', datetime.now())
        if isinstance(date_published, str):
            date_str = date_published
        else:
            date_str = date_published.strftime("%Y-%m-%d %H:%M")
        
        # –û—á–∏—â–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ—Ç –Ω–µ–Ω—É–∂–Ω—ã—Ö —á–∞—Å—Ç–µ–π
        cleaned_analysis = self._clean_analysis_text(analysis_text)
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—á–∏—â–µ–Ω–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
        message = f"""ü§ñ **–ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è**

üìÖ **–î–∞—Ç–∞:** {date_str}
üì∫ **–ò—Å—Ç–æ—á–Ω–∏–∫:** {source_channel}
üß† **–ú–æ–¥–µ–ª—å:** {model_used}
‚úÖ **–°—Ç–∞—Ç—É—Å:** {status}

üìù **–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏:**
_{title}_

üîó **[–ß–∏—Ç–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç]({post_link})**

üìä **–ê–ù–ê–õ–ò–ó –í–õ–ò–Ø–ù–ò–Ø –ù–ê –Ø–ù–î–ï–ö–° –ü–£–¢–ï–®–ï–°–¢–í–ò–Ø:**

{cleaned_analysis}

---
_–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è —Å –ø–æ–º–æ—â—å—é Zeliboba AI_
"""
        
        return message
    
    def _clean_analysis_text(self, analysis_text):
        """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç –Ω–µ–Ω—É–∂–Ω—ã—Ö —á–∞—Å—Ç–µ–π"""
        # –£–±–∏—Ä–∞–µ–º "–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞:" –∏ –≤—Å–µ –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        lines = analysis_text.split('\n')
        cleaned_lines = []
        skip_until_structure = True
        
        for line in lines:
            line = line.strip()
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–æ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            if skip_until_structure:
                if any(keyword in line.lower() for keyword in ['—Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:', '–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫', '–≤–ª–∏—è–Ω–∏–µ –Ω–∞', '–≤–∞–∂–Ω–æ—Å—Ç—å:', '–∫–ª—é—á–µ–≤—ã–µ']):
                    skip_until_structure = False
                    cleaned_lines.append(line)
                elif '–≤–ª–∏—è–Ω–∏–µ –Ω–∞ —è–Ω–¥–µ–∫—Å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è:' in line.lower():
                    skip_until_structure = False
                    cleaned_lines.append(line)
                else:
                    continue
            else:
                cleaned_lines.append(line)
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        if not cleaned_lines:
            return analysis_text
        
        return '\n'.join(cleaned_lines)
    
    def _format_summary_post_message(self, summary_post, analysis_result, source_channel):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–∞–º–º–∞—Ä–∏ –ø–æ—Å—Ç–∞"""
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
        analysis_text = analysis_result.get('analysis_text', '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
        model_used = analysis_result.get('model_used', 'Unknown')
        status = analysis_result.get('status', 'unknown')
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∞–º–º–∞—Ä–∏
        main_idea = summary_post.get('main_idea', '')
        summary = summary_post.get('summary', '')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç
        telegram_message_id = summary_post.get('telegram_message_id')
        channel_username = summary_post.get('channel_username', source_channel)
        
        # –£–±–∏—Ä–∞–µ–º @ –∏–∑ username –µ—Å–ª–∏ –µ—Å—Ç—å
        if channel_username and channel_username.startswith('@'):
            channel_username = channel_username[1:]
        
        post_link = f"https://t.me/{channel_username}/{telegram_message_id}" if telegram_message_id and channel_username else "–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        date_published = summary_post.get('date_published', datetime.now())
        if isinstance(date_published, str):
            date_str = date_published
        else:
            date_str = date_published.strftime("%Y-%m-%d %H:%M")
        
        # –û—á–∏—â–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ—Ç –Ω–µ–Ω—É–∂–Ω—ã—Ö —á–∞—Å—Ç–µ–π
        cleaned_analysis = self._clean_analysis_text(analysis_text)
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—á–∏—â–µ–Ω–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
        message = f"""ü§ñ **–ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è**

üìÖ **–î–∞—Ç–∞:** {date_str}
üì∫ **–ò—Å—Ç–æ—á–Ω–∏–∫:** {source_channel}
üß† **–ú–æ–¥–µ–ª—å:** {model_used}
‚úÖ **–°—Ç–∞—Ç—É—Å:** {status}

üí° **–ì–ª–∞–≤–Ω–∞—è –º—ã—Å–ª—å:**
_{main_idea}_

üìù **–ö—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏:**
{summary}

üîó **[–ß–∏—Ç–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç]({post_link})**

üìä **–ê–ù–ê–õ–ò–ó –í–õ–ò–Ø–ù–ò–Ø –ù–ê –Ø–ù–î–ï–ö–° –ü–£–¢–ï–®–ï–°–¢–í–ò–Ø:**

{cleaned_analysis}

---
_–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è —Å –ø–æ–º–æ—â—å—é Zeliboba AI_
"""
        
        return message
    
    async def send_batch_summaries(self, channel_target, limit=10):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–∫–µ—Ç–∞ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        db = DatabaseManager()
        if not db.connect():
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return 0
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
            query = """
                SELECT 
                    p.id, p.content, p.date_published,
                    c.title as channel_title,
                    za.analysis_text, za.model_name, za.status, za.result
                FROM posts p
                JOIN channels c ON p.channel_id = c.id
                JOIN zeliboba_analysis za ON p.id = za.post_id
                WHERE za.status = 'success' 
                AND za.analysis_text IS NOT NULL
                ORDER BY p.date_published DESC
                LIMIT %s;
            """
            
            db.cursor.execute(query, (limit,))
            results = db.cursor.fetchall()
            
            if not results:
                logger.info("–ù–µ—Ç –∞–Ω–∞–ª–∏–∑–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
                return 0
            
            sent_count = 0
            for row in results:
                original_post = {
                    'content': row['content'],
                    'date_published': row['date_published']
                }
                
                analysis_result = {
                    'analysis_text': row['analysis_text'],
                    'model_used': row['model_name'],
                    'status': row['status']
                }
                
                success = await self.send_summary(
                    channel_target,
                    original_post,
                    analysis_result,
                    row['channel_title']
                )
                
                if success:
                    sent_count += 1
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    await asyncio.sleep(1)
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –ø–æ—Å—Ç–∞ {row['id']}")
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–π –∏–∑ {len(results)}")
            return sent_count
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞–∫–µ—Ç–∞ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–π: {e}")
            return 0
        finally:
            db.disconnect()
    
    async def send_summary_with_analysis(self, channel_target, summary_data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∞–º–º–∞—Ä–∏ —Å –∞–Ω–∞–ª–∏–∑–æ–º –≤ –∫–∞–Ω–∞–ª"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–º–º–∞—Ä–∏ –∏ –∞–Ω–∞–ª–∏–∑–æ–º
            message = self._format_summary_with_analysis_message(summary_data)
            
            # –í—Å–µ–≥–¥–∞ —Ä–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            messages = self._split_long_message(message, max_length=4000)
            
            for i, msg_part in enumerate(messages):
                await self.client.send_message(channel_target, msg_part, parse_mode='markdown')
                if i < len(messages) - 1:  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π
                    await asyncio.sleep(2)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            
            logger.info(f"–°–∞–º–º–∞—Ä–∏ —Å –∞–Ω–∞–ª–∏–∑–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {channel_target} ({len(messages)} —á–∞—Å—Ç–µ–π)")
            return True
            
        except FloodWaitError as e:
            logger.warning(f"Flood wait: –æ–∂–∏–¥–∞–Ω–∏–µ {e.seconds} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(e.seconds)
            return await self.send_summary_with_analysis(channel_target, summary_data)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∞–º–º–∞—Ä–∏ —Å –∞–Ω–∞–ª–∏–∑–æ–º: {e}")
            return False
    
    def _format_summary_with_analysis_message(self, summary_data):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–∞–º–º–∞—Ä–∏ –∏ –∞–Ω–∞–ª–∏–∑–æ–º"""
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∞–º–º–∞—Ä–∏
        main_idea = summary_data.get('main_idea', '')
        summary = summary_data.get('summary', '')
        analysis = summary_data.get('analysis', '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
        importance_score = summary_data.get('importance_score', 5.0)
        channel_title = summary_data.get('channel_title', 'Unknown')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç
        telegram_message_id = summary_data.get('telegram_message_id')
        channel_username = summary_data.get('channel_username', '')
        
        # –£–±–∏—Ä–∞–µ–º @ –∏–∑ username –µ—Å–ª–∏ –µ—Å—Ç—å
        if channel_username and channel_username.startswith('@'):
            channel_username = channel_username[1:]
        
        post_link = f"https://t.me/{channel_username}/{telegram_message_id}" if telegram_message_id and channel_username else "–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        date_published = summary_data.get('date_published', datetime.now())
        if isinstance(date_published, str):
            date_str = date_published
        else:
            date_str = date_published.strftime("%Y-%m-%d %H:%M")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏
        if importance_score >= 9:
            importance_emoji = "üî•üî•üî•"
        elif importance_score >= 8:
            importance_emoji = "üî•üî•"
        elif importance_score >= 7:
            importance_emoji = "üî•"
        else:
            importance_emoji = "üìä"
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"""{importance_emoji} **–ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è**

üìÖ **–î–∞—Ç–∞:** {date_str}
üì∫ **–ò—Å—Ç–æ—á–Ω–∏–∫:** {channel_title}
‚≠ê **–í–∞–∂–Ω–æ—Å—Ç—å:** {importance_score}/10

üí° **–ì–ª–∞–≤–Ω–∞—è –º—ã—Å–ª—å:**
_{main_idea}_

üìù **–ö—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏:**
{summary}

üîó **[–ß–∏—Ç–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç]({post_link})**

üìä **–ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –í–õ–ò–Ø–ù–ò–Ø –ù–ê –Ø–ù–î–ï–ö–° –ü–£–¢–ï–®–ï–°–¢–í–ò–Ø:**

{analysis}

---
_–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è —Å –ø–æ–º–æ—â—å—é Zeliboba AI_
"""
        
        return message

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –≤ Telegram')
    parser.add_argument('--create-channel', action='store_true', help='–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª')
    parser.add_argument('--channel-name', default='AI –°–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è', help='–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞')
    parser.add_argument('--send-summaries', type=int, help='–û—Ç–ø—Ä–∞–≤–∏—Ç—å N —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–π')
    parser.add_argument('--channel-id', help='ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ username –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890 –∏–ª–∏ @channel_name)')
    
    args = parser.parse_args()
    
    publisher = TelegramPublisher()
    
    if not await publisher.connect():
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram")
        return
    
    try:
        if args.create_channel:
            channel_id = await publisher.create_summary_channel(args.channel_name)
            if channel_id:
                print(f"‚úÖ –ö–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω! ID: {channel_id}")
                print(f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --channel-id {channel_id} –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–π")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª")
        
        elif args.send_summaries and args.channel_id:
            sent = await publisher.send_batch_summaries(args.channel_id, args.send_summaries)
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–π")
        
        else:
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
            print("  python telegram_publisher.py --create-channel")
            print("  python telegram_publisher.py --send-summaries 5 --channel-id CHANNEL_ID")
    
    finally:
        await publisher.disconnect()

if __name__ == "__main__":
    asyncio.run(main())