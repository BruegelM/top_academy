import os
import asyncio
import aiohttp
from config import (
    ELIZA_API_TOKEN,
    ELIZA_BASE_URL,
    ELIZA_CHAT_URL,
    ELIZA_DEFAULT_MODEL,
    ELIZA_DEFAULT_TEMPERATURE,
    ELIZA_DEFAULT_MAX_TOKENS,
    ELIZA_DEFAULT_TOP_P,
    ELIZA_DEFAULT_N
)

async def call_eliza_api():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Eliza API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞"""
    headers = {
        "Authorization": f"OAuth {ELIZA_API_TOKEN}",
        "Content-Type": "application/json"
    }

    payload = {
        "model": ELIZA_DEFAULT_MODEL,
        "messages": [
            {
                "role": "user",
                "content": "–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö –≤ —Ç—É—Ä–∏–∑–º–µ"
            }
        ],
        "temperature": ELIZA_DEFAULT_TEMPERATURE,
        "max_tokens": ELIZA_DEFAULT_MAX_TOKENS,
        "top_p": ELIZA_DEFAULT_TOP_P,
        "n": ELIZA_DEFAULT_N
    }

    try:
        async with aiohttp.ClientSession() as session:
            print(f"üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {ELIZA_CHAT_URL}")
            async with session.post(ELIZA_CHAT_URL, headers=headers, json=payload) as response:
                print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
                
                if response.status == 200:
                    result = await response.json()
                    print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç:")
                    if 'choices' in result and len(result['choices']) > 0:
                        content = result['choices'][0].get('message', {}).get('content', '')
                        print(f"–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:\n{content}")
                    else:
                        print(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:\n{result}")
                else:
                    error_text = await response.text()
                    print(f"‚ùå –û—à–∏–±–∫–∞: {response.status}")
                    print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {error_text}")
                    
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")

async def check_eliza_models():
    """–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Eliza API"""
    headers = {
        "Authorization": f"OAuth {ELIZA_API_TOKEN}",
        "Content-Type": "application/json"
    }

    try:
        async with aiohttp.ClientSession() as session:
            url = f"{ELIZA_BASE_URL}/models"
            print(f"üì° –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: {url}")
            async with session.get(url, headers=headers) as response:
                print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
                
                if response.status == 200:
                    models = await response.json()
                    print("‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
                    print(models)
                else:
                    error_text = await response.text()
                    print(f"‚ùå –û—à–∏–±–∫–∞: {response.status}")
                    print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {error_text}")
                    
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")

if __name__ == "__main__":
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Eliza API")
    asyncio.run(call_eliza_api())
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
    asyncio.run(check_eliza_models())