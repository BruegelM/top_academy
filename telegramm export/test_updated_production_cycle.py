#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
"""

import asyncio
import logging
from datetime import datetime
from database import DatabaseManager
from models import ZelibobaAnalyzer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def test_updated_analysis_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∞–Ω–∞–ª–∏–∑–∞ —Å–∞–º–º–∞—Ä–∏"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–∞–º–º–∞—Ä–∏")
    print("=" * 60)
    
    db = DatabaseManager()
    db.connect()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–º–∞—Ä–∏ –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞
        summaries = db.get_summaries_without_analysis(limit=3)
        
        if not summaries:
            print("‚ùå –ù–µ—Ç —Å–∞–º–º–∞—Ä–∏ –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            print("üí° –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∞–º–º–∞—Ä–∏...")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∞–º–º–∞—Ä–∏
            test_summaries = [
                {
                    "content": "–ù–æ–≤–∞—è –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä—è–º—ã–µ —Ä–µ–π—Å—ã –∏–∑ –ú–æ—Å–∫–≤—ã –≤ –¢–æ–∫–∏–æ. –ë–∏–ª–µ—Ç—ã –±—É–¥—É—Ç —Å—Ç–æ–∏—Ç—å –æ—Ç 45000 —Ä—É–±–ª–µ–π –≤ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É.",
                    "main_idea": "–ù–æ–≤–∞—è –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä—è–º—ã–µ —Ä–µ–π—Å—ã –ú–æ—Å–∫–≤–∞-–¢–æ–∫–∏–æ –æ—Ç 45000 —Ä—É–±–ª–µ–π.",
                    "channel_name": "Test Aviation Channel"
                },
                {
                    "content": "–¢—É—Ä—Ü–∏—è –≤–≤–æ–¥–∏—Ç –Ω–æ–≤—ã–µ –≤–∏–∑–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ç—É—Ä–∏—Å—Ç–æ–≤. –¢–µ–ø–µ—Ä—å –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–ø—Ä–∞–≤–∫–∞ –æ –¥–æ—Ö–æ–¥–∞—Ö –∏ –±—Ä–æ–Ω—å –æ—Ç–µ–ª—è.",
                    "main_idea": "–¢—É—Ä—Ü–∏—è –≤–≤–æ–¥–∏—Ç –Ω–æ–≤—ã–µ –≤–∏–∑–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ç—É—Ä–∏—Å—Ç–æ–≤.",
                    "channel_name": "Test Visa Channel"
                },
                {
                    "content": "–ö—Ä—É–ø–Ω–∞—è –≥–æ—Å—Ç–∏–Ω–∏—á–Ω–∞—è —Å–µ—Ç—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç 50 –Ω–æ–≤—ã—Ö –æ—Ç–µ–ª–µ–π –≤ –¢—É—Ä—Ü–∏–∏. –í—Å–µ –æ—Ç–µ–ª–∏ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ —Å–∏—Å—Ç–µ–º–µ –≤—Å–µ –≤–∫–ª—é—á–µ–Ω–æ.",
                    "main_idea": "–ì–æ—Å—Ç–∏–Ω–∏—á–Ω–∞—è —Å–µ—Ç—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç 50 –Ω–æ–≤—ã—Ö –æ—Ç–µ–ª–µ–π –≤ –¢—É—Ä—Ü–∏–∏ –ø–æ —Å–∏—Å—Ç–µ–º–µ –≤—Å–µ –≤–∫–ª—é—á–µ–Ω–æ.",
                    "channel_name": "Test Hotel Channel"
                }
            ]
            
            for i, test_data in enumerate(test_summaries, 1):
                summary_id = db.save_post_summary(
                    channel_id=1,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–∞–Ω–∞–ª
                    telegram_message_id=9999 + i,
                    sender_name="Test Sender",
                    sender_id=None,
                    summary=test_data["content"],
                    main_idea=test_data["main_idea"],
                    date_published=datetime.now(),
                    views_count=100,
                    forwards_count=10,
                    replies_count=5,
                    channel_name=test_data["channel_name"]
                )
                
                if summary_id:
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–∞–º–º–∞—Ä–∏ {i}: ID {summary_id}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∞–º–º–∞—Ä–∏ {i}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–∞–º–º–∞—Ä–∏
            summaries = db.get_summaries_without_analysis(limit=3)
        
        if not summaries:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∞–º–º–∞—Ä–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ {len(summaries)} —Å–∞–º–º–∞—Ä–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —Å–∞–º–º–∞—Ä–∏
        for i, summary in enumerate(summaries, 1):
            print(f"\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∞–º–º–∞—Ä–∏ {i}/{len(summaries)}")
            print("-" * 50)
            print(f"ID: {summary['id']}")
            print(f"–ì–ª–∞–≤–Ω–∞—è –º—ã—Å–ª—å: {summary['main_idea']}")
            print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {summary['summary'][:100]}...")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            print("\nüî§ –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º:")
            try:
                analysis_text, importance_score = ZelibobaAnalyzer.create_detailed_keyword_analysis(
                    summary['summary'], summary['main_idea']
                )
                
                print(f"üìä –û—Ü–µ–Ω–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏: {importance_score}/10")
                print(f"üìù –ê–Ω–∞–ª–∏–∑ (–ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤): {analysis_text[:300]}...")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É
                success = db.update_summary_analysis(
                    summary_id=summary['id'],
                    analysis=analysis_text,
                    importance_score=importance_score
                )
                
                if success:
                    print("‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {e}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º Zeliboba API (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Zeliboba API:")
            try:
                from config import ZELIBOBA_API_TOKEN, ZELIBOBA_BASE_URL, ZELIBOBA_MODEL_NAME, ZELIBOBA_TEMPERATURE
                
                analyzer = ZelibobaAnalyzer(
                    api_token=ZELIBOBA_API_TOKEN,
                    base_url=ZELIBOBA_BASE_URL,
                    model_name=ZELIBOBA_MODEL_NAME,
                    temperature=ZELIBOBA_TEMPERATURE
                )
                
                result = await analyzer.analyze_post_summary(summary['summary'])
                
                if result and result.status == "success":
                    print(f"üìä Zeliboba –≤–∞–∂–Ω–æ—Å—Ç—å: {result.importance_score}/10")
                    print(f"üìù Zeliboba –∞–Ω–∞–ª–∏–∑ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): {result.analysis[:200]}...")
                else:
                    error_msg = result.error if result else "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"
                    print(f"‚ùå –û—à–∏–±–∫–∞ Zeliboba: {error_msg}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Zeliboba: {e}")
            
            print("\n" + "="*50)
    
    finally:
        db.disconnect()

def test_production_cycle_components():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞"""
    
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    print("üìã –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    db = DatabaseManager()
    if db.connect():
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü
        try:
            db.cursor.execute("SELECT COUNT(*) FROM post_summaries")
            summaries_count = db.cursor.fetchone()['count']
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–∞–º–º–∞—Ä–∏ –≤ –±–∞–∑–µ: {summaries_count}")
            
            db.cursor.execute("SELECT COUNT(*) FROM post_summaries WHERE analysis IS NOT NULL")
            analyzed_count = db.cursor.fetchone()['count']
            print(f"üß† –°–∞–º–º–∞—Ä–∏ —Å –∞–Ω–∞–ª–∏–∑–æ–º: {analyzed_count}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        
        db.disconnect()
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("\nüìã –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    try:
        from config import (TELEGRAM_API_ID, TELEGRAM_API_HASH, ZELIBOBA_API_TOKEN, 
                           SUMMARY_CHANNEL_USERNAME, ZELIBOBA_ANALYSIS_PROMPT)
        
        config_checks = [
            ("TELEGRAM_API_ID", bool(TELEGRAM_API_ID)),
            ("TELEGRAM_API_HASH", bool(TELEGRAM_API_HASH)),
            ("ZELIBOBA_API_TOKEN", bool(ZELIBOBA_API_TOKEN)),
            ("SUMMARY_CHANNEL_USERNAME", bool(SUMMARY_CHANNEL_USERNAME)),
            ("ZELIBOBA_ANALYSIS_PROMPT", bool(ZELIBOBA_ANALYSIS_PROMPT))
        ]
        
        for config_name, is_set in config_checks:
            status = "‚úÖ" if is_set else "‚ùå"
            print(f"{status} {config_name}: {'–ù–∞—Å—Ç—Ä–æ–µ–Ω' if is_set else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º—Ç–∞
    print("\nüìã –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º—Ç–∞")
    try:
        from config import ZELIBOBA_ANALYSIS_PROMPT
        
        required_sections = [
            "–í–û–ó–ú–û–ñ–ù–û–°–¢–ò",
            "–†–ò–°–ö–ò", 
            "–í–õ–ò–Ø–ù–ò–ï –ù–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô",
            "–í–õ–ò–Ø–ù–ò–ï –ù–ê –ü–ê–†–¢–ù–ï–†–û–í",
            "–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò",
            "–í–õ–ò–Ø–ù–ò–ï –ù–ê –ö–û–ù–ö–£–†–ï–ù–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–¨"
        ]
        
        for section in required_sections:
            if section in ZELIBOBA_ANALYSIS_PROMPT:
                print(f"‚úÖ –†–∞–∑–¥–µ–ª '{section}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ–º—Ç–µ")
            else:
                print(f"‚ùå –†–∞–∑–¥–µ–ª '{section}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ–º—Ç–µ")
                
        print(f"üìè –î–ª–∏–Ω–∞ –ø—Ä–æ–º—Ç–∞: {len(ZELIBOBA_ANALYSIS_PROMPT)} —Å–∏–º–≤–æ–ª–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–º—Ç–∞: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞")
    print("=" * 70)
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 70)
    
    # –¢–µ—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    test_production_cycle_components()
    
    # –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞
    await test_updated_analysis_system()
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("=" * 70)
    print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    print("‚úÖ Fallback —Å–∏—Å—Ç–µ–º–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Zeliboba API")
    print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —Ç—Ä–µ–±—É–µ–º—ã–µ —Ä–∞–∑–¥–µ–ª—ã")
    print("‚úÖ –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π —Ü–∏–∫–ª –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º")

if __name__ == "__main__":
    asyncio.run(main())