#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤–ª–∏—è–Ω–∏—è –Ω–∞ Yandex Travel
"""

import asyncio
from models import ZelibobaAnalyzer
from database import DatabaseManager

def test_detailed_keyword_analysis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤–ª–∏—è–Ω–∏—è –Ω–∞ Yandex Travel")
    print("=" * 70)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º–∞—Ç–∏–∫
    test_cases = [
        {
            "content": "–ù–æ–≤–∞—è –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä—è–º—ã–µ —Ä–µ–π—Å—ã –∏–∑ –ú–æ—Å–∫–≤—ã –≤ –¢–æ–∫–∏–æ. –ë–∏–ª–µ—Ç—ã –±—É–¥—É—Ç —Å—Ç–æ–∏—Ç—å –æ—Ç 45000 —Ä—É–±–ª–µ–π –≤ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É. –ü–µ—Ä–≤—ã–π —Ä–µ–π—Å –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –Ω–∞ 15 –∏—é–ª—è.",
            "main_idea": "–ù–æ–≤–∞—è –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä—è–º—ã–µ —Ä–µ–π—Å—ã –ú–æ—Å–∫–≤–∞-–¢–æ–∫–∏–æ –æ—Ç 45000 —Ä—É–±–ª–µ–π.",
            "category": "–ê–≤–∏–∞—Ü–∏—è"
        },
        {
            "content": "–ö—Ä—É–ø–Ω–∞—è –≥–æ—Å—Ç–∏–Ω–∏—á–Ω–∞—è —Å–µ—Ç—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç 50 –Ω–æ–≤—ã—Ö –æ—Ç–µ–ª–µ–π –≤ –¢—É—Ä—Ü–∏–∏. –í—Å–µ –æ—Ç–µ–ª–∏ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ —Å–∏—Å—Ç–µ–º–µ –≤—Å–µ –≤–∫–ª—é—á–µ–Ω–æ. –¶–µ–Ω—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –æ—Ç 8000 —Ä—É–±–ª–µ–π –∑–∞ –Ω–æ—á—å.",
            "main_idea": "–ì–æ—Å—Ç–∏–Ω–∏—á–Ω–∞—è —Å–µ—Ç—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç 50 –Ω–æ–≤—ã—Ö –æ—Ç–µ–ª–µ–π –≤ –¢—É—Ä—Ü–∏–∏ –ø–æ —Å–∏—Å—Ç–µ–º–µ –≤—Å–µ –≤–∫–ª—é—á–µ–Ω–æ.",
            "category": "–û—Ç–µ–ª–∏"
        },
        {
            "content": "–†–æ—Å—Å–∏—è –∏ –ö–∏—Ç–∞–π –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å –æ –±–µ–∑–≤–∏–∑–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–µ–∑–¥–æ–∫ –¥–æ 15 –¥–Ω–µ–π. –°–æ–≥–ª–∞—à–µ–Ω–∏–µ –≤—Å—Ç—É–ø–∏—Ç –≤ —Å–∏–ª—É —Å 1 –∞–≤–≥—É—Å—Ç–∞ 2025 –≥–æ–¥–∞.",
            "main_idea": "–†–æ—Å—Å–∏—è –∏ –ö–∏—Ç–∞–π –≤–≤–æ–¥—è—Ç –±–µ–∑–≤–∏–∑–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Ç—É—Ä–∏—Å—Ç–æ–≤ –Ω–∞ 15 –¥–Ω–µ–π —Å –∞–≤–≥—É—Å—Ç–∞ 2025.",
            "category": "–í–∏–∑—ã"
        },
        {
            "content": "–≠–∫—Å–ø–µ—Ä—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É—é—Ç —Ä–æ—Å—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ —ç–∫–æ—Ç—É—Ä–∏–∑–º–∞ –Ω–∞ 40% –≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É. –û—Å–æ–±–µ–Ω–Ω–æ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω—ã –±—É–¥—É—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ–º –Ω–∞ –ø—Ä–∏—Ä–æ–¥—É.",
            "main_idea": "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç—Å—è —Ä–æ—Å—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ —ç–∫–æ—Ç—É—Ä–∏–∑–º–∞ –Ω–∞ 40% –≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É.",
            "category": "–¢—É—Ä–∏–∑–º"
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüìã –¢–µ—Å—Ç {i}: {test_case['category']}")
        print("-" * 50)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        analysis, importance_score = ZelibobaAnalyzer.create_detailed_keyword_analysis(
            test_case["content"], 
            test_case["main_idea"]
        )
        
        print(f"üìä –û—Ü–µ–Ω–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏: {importance_score}/10")
        print(f"üìù –ê–Ω–∞–ª–∏–∑:")
        print(analysis)
        print("\n" + "="*70)
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

def test_with_real_data():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã"""
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã")
    print("=" * 50)
    
    db = DatabaseManager()
    db.connect()
    
    try:
        cursor = db.connection.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        cursor.execute('''
            SELECT p.content, c.title as channel_title
            FROM posts p 
            JOIN channels c ON p.channel_id = c.id 
            WHERE LENGTH(p.content) > 100
            ORDER BY p.date_published DESC 
            LIMIT 3
        ''')
        
        posts = cursor.fetchall()
        
        if not posts:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        for i, (content, channel_title) in enumerate(posts, 1):
            print(f"\nüìã –†–µ–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç {i} –∏–∑ –∫–∞–Ω–∞–ª–∞ '{channel_title}'")
            print("-" * 50)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–ª–∞–≤–Ω—É—é –º—ã—Å–ª—å
            sentences = content.split('.')
            main_idea = '. '.join(sentences[:2]).strip() + '.'
            if len(main_idea) > 200:
                main_idea = main_idea[:200] + '...'
            
            print(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {content[:200]}...")
            print(f"üí° –ì–ª–∞–≤–Ω–∞—è –º—ã—Å–ª—å: {main_idea}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
            analysis, importance_score = ZelibobaAnalyzer.create_detailed_keyword_analysis(
                content, main_idea
            )
            
            print(f"üìä –û—Ü–µ–Ω–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏: {importance_score}/10")
            print(f"üìù –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:")
            print(analysis[:500] + "..." if len(analysis) > 500 else analysis)
            print("\n" + "="*50)
    
    finally:
        db.disconnect()

async def test_zeliboba_vs_keyword_analysis():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Zeliboba API –∏ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    
    print("\n‚öñÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ Zeliboba API vs –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º")
    print("=" * 60)
    
    test_content = "–¢—É—Ä—Ü–∏—è –≤–≤–æ–¥–∏—Ç –Ω–æ–≤—ã–µ –≤–∏–∑–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ç—É—Ä–∏—Å—Ç–æ–≤. –¢–µ–ø–µ—Ä—å –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–ø—Ä–∞–≤–∫–∞ –æ –¥–æ—Ö–æ–¥–∞—Ö –∏ –±—Ä–æ–Ω—å –æ—Ç–µ–ª—è –Ω–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è."
    main_idea = "–¢—É—Ä—Ü–∏—è –≤–≤–æ–¥–∏—Ç –Ω–æ–≤—ã–µ –≤–∏–∑–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ç—É—Ä–∏—Å—Ç–æ–≤."
    
    print(f"üìÑ –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {test_content}")
    print(f"üí° –ì–ª–∞–≤–Ω–∞—è –º—ã—Å–ª—å: {main_idea}")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    print("\nüî§ –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º:")
    keyword_analysis, keyword_score = ZelibobaAnalyzer.create_detailed_keyword_analysis(
        test_content, main_idea
    )
    print(f"üìä –í–∞–∂–Ω–æ—Å—Ç—å: {keyword_score}/10")
    print(f"üìù –ê–Ω–∞–ª–∏–∑: {keyword_analysis[:300]}...")
    
    # –ü–æ–ø—ã—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ Zeliboba (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    print("\nü§ñ –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Zeliboba API:")
    try:
        from config import ZELIBOBA_API_TOKEN, ZELIBOBA_BASE_URL, ZELIBOBA_MODEL_NAME, ZELIBOBA_TEMPERATURE
        
        analyzer = ZelibobaAnalyzer(
            api_token=ZELIBOBA_API_TOKEN,
            base_url=ZELIBOBA_BASE_URL,
            model_name=ZELIBOBA_MODEL_NAME,
            temperature=ZELIBOBA_TEMPERATURE
        )
        
        result = await analyzer.analyze_post_summary(test_content)
        
        if result and result.status == "success":
            print(f"üìä –í–∞–∂–Ω–æ—Å—Ç—å: {result.importance_score}/10")
            print(f"üìù –ê–Ω–∞–ª–∏–∑: {result.analysis[:300]}...")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ Zeliboba: {result.error if result else '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Zeliboba: {e}")
    
    print("\n‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
    print("=" * 70)
    
    # –¢–µ—Å—Ç 1: –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    test_detailed_keyword_analysis()
    
    # –¢–µ—Å—Ç 2: –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_with_real_data()
    
    # –¢–µ—Å—Ç 3: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)
    asyncio.run(test_zeliboba_vs_keyword_analysis())
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print("‚úÖ –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º–∞—Ç–∏–∫–∏")
    print("‚úÖ –û—Ü–µ–Ω–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π")
    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –≤–∫–ª—é—á–∞–µ—Ç –≤—Å–µ —Ç—Ä–µ–±—É–µ–º—ã–µ —Ä–∞–∑–¥–µ–ª—ã —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏")

if __name__ == "__main__":
    main()