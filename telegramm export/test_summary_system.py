#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Å–∞–º–º–∞—Ä–∏
"""

import asyncio
import logging
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from config import ZELIBOBA_API_TOKEN, ZELIBOBA_MODEL_NAME, ZELIBOBA_TEMPERATURE
from database import DatabaseManager
from models import ZelibobaAnalyzer
from summary_processor import PostSummaryProcessor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class SummarySystemTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Å–∞–º–º–∞—Ä–∏"""
    
    def __init__(self):
        self.db = DatabaseManager()
        self.analyzer = None
        self.processor = None
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã —Å–∞–º–º–∞—Ä–∏...")
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        if not self.db.connect():
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ Zeliboba
        if not ZELIBOBA_API_TOKEN:
            logger.error("ZELIBOBA_API_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        self.analyzer = ZelibobaAnalyzer(
            ZELIBOBA_API_TOKEN,
            model_name=ZELIBOBA_MODEL_NAME,
            temperature=ZELIBOBA_TEMPERATURE
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        self.processor = PostSummaryProcessor()
        
        logger.info("–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        return True
    
    async def test_database_structure(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã post_summaries
            self.db.cursor.execute("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_name = 'post_summaries'
                );
            """)
            
            table_exists = self.db.cursor.fetchone()[0]
            
            if table_exists:
                logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ post_summaries —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
                self.db.cursor.execute("""
                    SELECT column_name, data_type 
                    FROM information_schema.columns 
                    WHERE table_name = 'post_summaries'
                    ORDER BY ordinal_position;
                """)
                
                columns = self.db.cursor.fetchall()
                logger.info("üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã post_summaries:")
                for col in columns:
                    logger.info(f"   - {col['column_name']}: {col['data_type']}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                self.db.cursor.execute("SELECT COUNT(*) as count FROM post_summaries")
                count = self.db.cursor.fetchone()['count']
                logger.info(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–º–º–∞—Ä–∏ –≤ –ë–î: {count}")
                
                return True
            else:
                logger.error("‚ùå –¢–∞–±–ª–∏—Ü–∞ post_summaries –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                logger.info("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python telegram_summary_exporter.py --init-db")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
            return False
    
    async def test_summary_creation(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏...")
        
        test_text = """
        –ù–æ–≤–∞—è –≥–æ—Å—Ç–∏–Ω–∏—Ü–∞ Marriott International –æ—Ç–∫—Ä—ã–ª–∞—Å—å –≤ —Ü–µ–Ω—Ç—Ä–µ –ú–æ—Å–∫–≤—ã –Ω–∞ –¢–≤–µ—Ä—Å–∫–æ–π —É–ª–∏—Ü–µ. 
        –û—Ç–µ–ª—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç 200 –Ω–æ–º–µ—Ä–æ–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –≤–∫–ª—é—á–∞—è 50 –ª—é–∫—Å–æ–≤ —Å –ø–∞–Ω–æ—Ä–∞–º–Ω—ã–º –≤–∏–¥–æ–º –Ω–∞ –ö—Ä–µ–º–ª—å. 
        
        –í –æ—Ç–µ–ª–µ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç—Ä–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–π –∫—É—Ö–Ω–∏, —Å—É—à–∏-–±–∞—Ä –∏ –∫–æ—Ñ–µ–π–Ω—è. 
        –¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ø–∞-—Ü–µ–Ω—Ç—Ä –ø–ª–æ—â–∞–¥—å—é 800 –∫–≤.–º, —Ñ–∏—Ç–Ω–µ—Å-–∑–∞–ª –∏ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü-–∑–∞–ª—ã –Ω–∞ 300 —á–µ–ª–æ–≤–µ–∫.
        
        –£–ø—Ä–∞–≤–ª—è—é—â–∏–π –æ—Ç–µ–ª–µ–º –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤ –æ—Ç–º–µ—Ç–∏–ª, —á—Ç–æ –æ–Ω–∏ –æ–∂–∏–¥–∞—é—Ç –≤—ã—Å–æ–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É –±–ª–∞–≥–æ–¥–∞—Ä—è 
        —É–¥–∞—á–Ω–æ–º—É —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–º —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞. –°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–æ–º–µ—Ä–æ–≤ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Ç 15 000 —Ä—É–±–ª–µ–π 
        –∑–∞ –Ω–æ—á—å –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –Ω–æ–º–µ—Ä–µ –∏ –¥–æ 80 000 —Ä—É–±–ª–µ–π –∑–∞ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏–π –ª—é–∫—Å.
        
        –û—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–Ω—è–ª –ø–µ—Ä–≤—ã—Ö –≥–æ—Å—Ç–µ–π –∏ –ø–æ–ª—É—á–∏–ª –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –æ –∫–∞—á–µ—Å—Ç–≤–µ —Å–µ—Ä–≤–∏—Å–∞ –∏ 
        —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –¥–∏–∑–∞–π–Ω–µ –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–≤. –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –∫ –∫–æ–Ω—Ü—É –≥–æ–¥–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç 75%.
        """
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∞–º–º–∞—Ä–∏
            summary_result = await self.analyzer.create_summary(test_text)
            
            if summary_result and summary_result.get("status") == "success":
                analysis_text = summary_result.get("analysis_text", "")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç–∏ —Å–∞–º–º–∞—Ä–∏
                from summary_processor import PostSummaryProcessor
                processor = PostSummaryProcessor()
                main_idea, summary = processor.extract_summary_parts(analysis_text)
                
                logger.info("‚úÖ –°–∞–º–º–∞—Ä–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ")
                logger.info(f"üí° –ì–ª–∞–≤–Ω–∞—è –º—ã—Å–ª—å: {main_idea}")
                logger.info(f"üìù –°–∞–º–º–∞—Ä–∏: {summary[:200]}...")
                logger.info(f"üìè –î–ª–∏–Ω–∞ —Å–∞–º–º–∞—Ä–∏: {len(summary.split())} —Å–ª–æ–≤")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                word_count = len(summary.split())
                if word_count <= 1000:
                    logger.info("‚úÖ –°–∞–º–º–∞—Ä–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—é –≤ 1000 —Å–ª–æ–≤")
                else:
                    logger.warning(f"‚ö†Ô∏è –°–∞–º–º–∞—Ä–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç: {word_count} —Å–ª–æ–≤")
                
                return True
            else:
                error = summary_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞") if summary_result else "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏: {error}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∞–º–º–∞—Ä–∏: {e}")
            return False
    
    async def test_existing_posts_processing(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            self.db.cursor.execute("""
                SELECT COUNT(*) as count FROM posts p
                LEFT JOIN post_summaries ps ON p.channel_id = ps.channel_id 
                    AND p.telegram_message_id = ps.telegram_message_id
                WHERE ps.id IS NULL
                AND p.content IS NOT NULL
                AND p.content != ''
                AND LENGTH(p.content) >= 100
            """)
            
            posts_to_process = self.db.cursor.fetchone()['count']
            logger.info(f"üìä –ü–æ—Å—Ç–æ–≤ –æ–∂–∏–¥–∞—é—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏: {posts_to_process}")
            
            if posts_to_process > 0:
                logger.info("‚úÖ –ï—Å—Ç—å –ø–æ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                logger.info("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python summary_processor.py --process --limit 5")
                return True
            else:
                logger.info("‚ÑπÔ∏è –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–≤—Å–µ —É–∂–µ –∏–º–µ—é—Ç —Å–∞–º–º–∞—Ä–∏)")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–æ–≤: {e}")
            return False
    
    async def test_summary_analysis(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Å–∞–º–º–∞—Ä–∏"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Å–∞–º–º–∞—Ä–∏...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            self.db.cursor.execute("""
                SELECT COUNT(*) as count FROM post_summaries ps
                LEFT JOIN zeliboba_analysis za ON ps.id = za.post_id 
                    AND za.analysis_type = 'summary_importance'
                WHERE za.id IS NULL
            """)
            
            summaries_to_analyze = self.db.cursor.fetchone()['count']
            logger.info(f"üìä –°–∞–º–º–∞—Ä–∏ –æ–∂–∏–¥–∞—é—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏: {summaries_to_analyze}")
            
            if summaries_to_analyze > 0:
                logger.info("‚úÖ –ï—Å—Ç—å —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏")
                return True
            else:
                logger.info("‚ÑπÔ∏è –ù–µ—Ç —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–≤—Å–µ —É–∂–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã)")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∞–º–º–∞—Ä–∏: {e}")
            return False
    
    async def test_publication_readiness(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∞–∂–Ω—ã—Ö —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            important_summaries = self.db.get_top_important_summaries_for_publication(5)
            
            if important_summaries:
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(important_summaries)} –≤–∞–∂–Ω—ã—Ö —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                
                for i, summary in enumerate(important_summaries, 1):
                    importance_score = summary.get('importance_score', 'N/A')
                    channel_title = summary.get('channel_title', 'Unknown')
                    main_idea = summary.get('main_idea', '')[:100] + "..."
                    
                    logger.info(f"   {i}. –í–∞–∂–Ω–æ—Å—Ç—å: {importance_score}/10, –ö–∞–Ω–∞–ª: {channel_title}")
                    logger.info(f"      –ì–ª–∞–≤–Ω–∞—è –º—ã—Å–ª—å: {main_idea}")
                
                return True
            else:
                logger.info("‚ÑπÔ∏è –ù–µ—Ç –≤–∞–∂–Ω—ã—Ö —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            return False
    
    async def run_full_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Å–∞–º–º–∞—Ä–∏")
        logger.info("=" * 60)
        
        tests = [
            ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", self.test_database_structure),
            ("–°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–º–º–∞—Ä–∏", self.test_summary_creation),
            ("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤", self.test_existing_posts_processing),
            ("–ê–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Å–∞–º–º–∞—Ä–∏", self.test_summary_analysis),
            ("–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", self.test_publication_readiness),
        ]
        
        passed = 0
        total = len(tests)
        
        for test_name, test_func in tests:
            logger.info(f"\nüìã –¢–µ—Å—Ç: {test_name}")
            logger.info("-" * 40)
            
            try:
                result = await test_func()
                if result:
                    logger.info(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
                    passed += 1
                else:
                    logger.error(f"‚ùå {test_name}: –ù–ï –ü–†–û–ô–î–ï–ù")
            except Exception as e:
                logger.error(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
        
        logger.info("\n" + "=" * 60)
        logger.info("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        logger.info("=" * 60)
        logger.info(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{total}")
        logger.info(f"‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {total - passed}/{total}")
        
        if passed == total:
            logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ —Å–∞–º–º–∞—Ä–∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏.")
        
        return passed == total
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.db:
            self.db.disconnect()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = SummarySystemTester()
    
    try:
        if not await tester.initialize():
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–µ—Ä")
            return
        
        await tester.run_full_test()
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        tester.cleanup()

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–∞–º–º–∞—Ä–∏")
    print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Å–∞–º–º–∞—Ä–∏")
    print("=" * 60)
    
    asyncio.run(main())