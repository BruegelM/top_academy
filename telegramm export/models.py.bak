from dataclasses import dataclass
from datetime import datetime
from typing import Optional, Dict, Any

@dataclass
class Channel:
    """–ú–æ–¥–µ–ª—å –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞"""
    telegram_id: int
    title: str
    username: Optional[str] = None
    type: str = 'channel'
    id: Optional[int] = None
    created_at: Optional[datetime] = None

@dataclass
class Post:
    """–ú–æ–¥–µ–ª—å –ø–æ—Å—Ç–∞/—Å–æ–æ–±—â–µ–Ω–∏—è"""
    channel_id: int
    telegram_message_id: int
    content: str
    date_published: datetime
    sender_name: Optional[str] = None
    sender_id: Optional[int] = None
    views_count: int = 0
    forwards_count: int = 0
    replies_count: int = 0
    id: Optional[int] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None

@dataclass
class Reaction:
    """–ú–æ–¥–µ–ª—å —Ä–µ–∞–∫—Ü–∏–∏"""
    post_id: int
    reaction_type: str
    count: int
    id: Optional[int] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None

class ReactionParser:
    """–ü–∞—Ä—Å–µ—Ä —Ä–µ–∞–∫—Ü–∏–π –∏–∑ Telegram API"""
    
    @staticmethod
    def parse_reactions(message_reactions) -> Dict[str, int]:
        """
        –ü–∞—Ä—Å–∏—Ç —Ä–µ–∞–∫—Ü–∏–∏ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
        
        Args:
            message_reactions: –æ–±—ä–µ–∫—Ç —Ä–µ–∞–∫—Ü–∏–π –∏–∑ Telethon
            
        Returns:
            Dict[str, int]: —Å–ª–æ–≤–∞—Ä—å —Å —Ç–∏–ø–∞–º–∏ —Ä–µ–∞–∫—Ü–∏–π –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        """
        reactions = {}
        
        if not message_reactions or not hasattr(message_reactions, 'results'):
            return reactions
        
        for reaction in message_reactions.results:
            if hasattr(reaction, 'reaction'):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–º–æ–¥–∑–∏ —Ä–µ–∞–∫—Ü–∏–π
                if hasattr(reaction.reaction, 'emoticon'):
                    reaction_type = reaction.reaction.emoticon
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π
                elif hasattr(reaction.reaction, 'document_id'):
                    reaction_type = f"custom_{reaction.reaction.document_id}"
                else:
                    reaction_type = "unknown"
                
                reactions[reaction_type] = reaction.count
        
        return reactions
    
    @staticmethod
    def normalize_reaction_type(reaction_type: str) -> str:
        """
        –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–∏–ø —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏–∑–∞
        
        Args:
            reaction_type: –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–∏–ø —Ä–µ–∞–∫—Ü–∏–∏
            
        Returns:
            str: –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–µ–∞–∫—Ü–∏–∏
        """
        # –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –Ω–∞ –ø–æ–Ω—è—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        emoji_mapping = {
            'üëç': 'like',
            'üëé': 'dislike', 
            '‚ù§Ô∏è': 'heart',
            'üî•': 'fire',
            'ü•∞': 'love',
            'üòÅ': 'laugh',
            'üò±': 'wow',
            'üò¢': 'sad',
            'üò°': 'angry',
            'üëè': 'clap',
            'ü§î': 'think',
            'ü§Æ': 'vomit',
            'üí©': 'poop',
            'ü§°': 'clown',
            'ü•±': 'yawn',
            'ü•¥': 'woozy',
            '‚ù§Ô∏è‚Äçüî•': 'heart_fire',
            'üíØ': 'hundred',
            '‚ö°': 'lightning',
            'üçì': 'strawberry'
        }
        
        return emoji_mapping.get(reaction_type, reaction_type)

class MessageProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram"""
    
    @staticmethod
    def extract_message_data(message, channel_id: int) -> Optional[Post]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
        
        Args:
            message: –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telethon
            channel_id: ID –∫–∞–Ω–∞–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            Post: –æ–±—ä–µ–∫—Ç –ø–æ—Å—Ç–∞ –∏–ª–∏ None –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞
        """
        if not message.text:
            return None
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
        sender_name = "Unknown"
        sender_id = None
        
        if message.sender:
            if hasattr(message.sender, 'first_name'):
                sender_name = message.sender.first_name or ""
                if hasattr(message.sender, 'last_name') and message.sender.last_name:
                    sender_name += f" {message.sender.last_name}"
            elif hasattr(message.sender, 'title'):
                sender_name = message.sender.title
            
            if hasattr(message.sender, 'id'):
                sender_id = message.sender.id
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ø–æ—Å—Ç–∞
        post = Post(
            channel_id=channel_id,
            telegram_message_id=message.id,
            content=message.text,
            date_published=message.date,
            sender_name=sender_name,
            sender_id=sender_id,
            views_count=message.views or 0,
            forwards_count=message.forwards or 0,
            replies_count=getattr(message.replies, 'replies', 0) if hasattr(message, 'replies') and message.replies is not None else 0
        )
        
        return post
    
    @staticmethod
    def format_message_for_file(message, sender_name: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        
        Args:
            message: –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telethon
            sender_name: –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            
        Returns:
            str: –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        date_str = message.date.strftime("%Y-%m-%d %H:%M:%S")
        return f"[{date_str}] {sender_name}: {message.text}"

class ExportStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    
    def __init__(self):
        self.total_messages = 0
        self.saved_to_db = 0
        self.saved_to_file = 0
        self.errors = 0
        self.channels_processed = 0
        self.start_time = datetime.now()
    
    def add_message(self):
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.total_messages += 1
    
    def add_db_save(self):
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤ –ë–î"""
        self.saved_to_db += 1
    
    def add_file_save(self):
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª"""
        self.saved_to_file += 1
    
    def add_error(self):
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        self.errors += 1
    
    def add_channel(self):
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        self.channels_processed += 1
    
    def get_duration(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        return (datetime.now() - self.start_time).total_seconds()
    
    def get_summary(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        duration = self.get_duration()
        return f"""
–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:
- –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {self.channels_processed}
- –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.total_messages}
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {self.saved_to_db}
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª—ã: {self.saved_to_file}
- –û—à–∏–±–æ–∫: {self.errors}
- –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫
- –°–∫–æ—Ä–æ—Å—Ç—å: {self.total_messages/duration:.2f} —Å–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫
        """.strip()

class ZelibobaAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é Zeliboba API"""
    
    def __init__(self, api_token: str, base_url: str = "https://api.zeliboba.yandex.net",
                 model_name: str = "claude-3-opus", temperature: float = 0.3):
        self.api_token = api_token
        self.base_url = base_url.rstrip('/')
        self.model_name = model_name
        self.temperature = temperature
    
    async def create_summary(self, content: str) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–∞–º–º–∞—Ä–∏ –ø–æ—Å—Ç–∞ —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –≥–ª–∞–≤–Ω–æ–π –º—ã—Å–ª–∏
        
        Args:
            content: –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
            
        Returns:
            Dict[str, Any]: —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Å–∞–º–º–∞—Ä–∏ –∏ –≥–ª–∞–≤–Ω–æ–π –º—ã—Å–ª—å—é
        """
        summary_prompt = """
–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞ –∏–∑ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–∞.

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –°–∞–º–º–∞—Ä–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 3 –∞–±–∑–∞—Ü–µ–≤
2. –û–±—â–∏–π –æ–±—ä–µ–º –Ω–µ –±–æ–ª–µ–µ 1000 —Å–ª–æ–≤
3. –Ø–≤–Ω–æ –≤—ã–¥–µ–ª–∏ –≥–ª–∞–≤–Ω—É—é –º—ã—Å–ª—å –ø–æ—Å—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
4. –°–æ—Ö—Ä–∞–Ω–∏ –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
5. –ò—Å–ø–æ–ª—å–∑—É–π —è—Å–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–ì–õ–ê–í–ù–ê–Ø –ú–´–°–õ–¨: [–æ–¥–Ω–æ —á–µ—Ç–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–¥–µ–µ–π –ø–æ—Å—Ç–∞]

–°–ê–ú–ú–ê–†–ò:
[–∫—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ –≤ 1-3 –∞–±–∑–∞—Ü–∞—Ö, —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–µ–µ —Å—É—Ç—å –∏ –¥–µ—Ç–∞–ª–∏]
"""
        
        return await self.analyze_content(content, summary_prompt)
        
    async def analyze_content(self, content: str, prompt: str) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é Zeliboba API –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø—Ä–æ–º—Ç—É
        
        Args:
            content: —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            prompt: –ø—Ä–æ–º—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            Dict[str, Any]: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        """
        try:
            import aiohttp
            import json
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º—Ç —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
            full_prompt = f"{prompt}\n\n–¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n{content}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
            models_info = await self.get_available_models()
            if models_info.get("status") != "success":
                return {
                    "status": "error",
                    "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {models_info.get('error')}",
                    "model_used": self.model_name
                }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç URL –∏ –∑–∞–ø—Ä–æ—Å–∞ —Å row-processor
            url = f"{self.base_url}/balance/bibaboba7.5bt0v7/generative"
            headers = {
                "Content-Type": "application/json",
                "X-Model-Discovery-Oauth-Token": self.api_token
            }
            
            payload = {
                "TextSegments": [{
                    "key": "content",
                    "value": content
                }],
                "Params": {
                    "Seed": 42,
                    "NumHypos": 10,
                    "MinOutLen": 100
                },
                "RowProcessor": {
                    "processor": {
                        "type": "standard",
                        "standard_params": {
                            "tokenizer_type": "gena_sp",
                            "vocab": {"local_path": "-"},
                            "segments": [
                                {
                                    "ptune": {"size": 40}
                                },
                                {
                                    "column": {"name": "content"}
                                }
                            ],
                            "max_seq_len": 1000,
                            "padding_side": "right"
                        }
                    }
                }
            }
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
            timeout = aiohttp.ClientTimeout(total=120)  # 2 –º–∏–Ω—É—Ç—ã
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.post(url, headers=headers, json=payload) as response:
                    if response.status == 200:
                        result = await response.json()
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Zeliboba (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
                        if isinstance(result, dict) and "Responses" in result:
                            if len(result["Responses"]) > 0 and "Response" in result["Responses"][0]:
                                analysis_text = result["Responses"][0]["Response"][0].strip()
                                score = result["Responses"][0].get("Score", 0)
                                num_tokens = result["Responses"][0].get("NumTokens", 0)
                            else:
                                analysis_text = ""
                                score = 0
                                num_tokens = 0
                        else:
                            analysis_text = str(result).strip()
                            score = 0
                            num_tokens = 0
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç
                        if not analysis_text:
                            return {
                                "status": "error",
                                "error": "–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Zeliboba API",
                                "model_used": self.model_name,
                                "raw_response": result
                            }
                        
                        return {
                            "status": "success",
                            "analysis_text": analysis_text,
                            "model_used": self.model_name,
                            "temperature": self.temperature,
                            "prompt_used": prompt,
                            "raw_response": result,
                            "score": score,
                            "num_tokens": num_tokens
                        }
                    else:
                        error = await response.text()
                        return {
                            "status": "error",
                            "error": f"Zeliboba API error: {response.status} - {error}",
                            "model_used": self.model_name
                        }
                        
        except Exception as e:
            return {
                "status": "error",
                "error": f"Exception during Zeliboba API call: {str(e)}",
                "model_used": self.model_name
            }
    
    async def get_available_models(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏–∑ Zeliboba API
        
        Returns:
            Dict[str, Any]: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö
        """
        try:
            import aiohttp
            
            url = f"{self.base_url}/api/v1/models"
            headers = {
                "Authorization": f"Bearer {self.api_token}",
                "Accept": "application/json"
            }
            
            timeout = aiohttp.ClientTimeout(total=30)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.get(url, headers=headers) as response:
                    if response.status == 200:
                        try:
                            # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
                            result = await response.json()
                            return {
                                "status": "success",
                                "models": result
                            }
                        except:
                            # –ï—Å–ª–∏ –Ω–µ JSON, –ø–æ–ª—É—á–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
                            text = await response.text()
                            return {
                                "status": "success",
                                "models": {"raw_response": text}
                            }
                    else:
                        error = await response.text()
                        return {
                            "status": "error",
                            "error": f"Models API error: {response.status} - {error}"
                        }
                        
        except Exception as e:
            return {
                "status": "error",
                "error": f"Exception during models API call: {str(e)}"
            }

    async def analyze_post_summary(self, summary: str) -> Optional['SummaryAnalysisResult']:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∞–º–º–∞—Ä–∏ –ø–æ—Å—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∞–∂–Ω–æ—Å—Ç–∏ –∏ –≤–ª–∏—è–Ω–∏—è –Ω–∞ Yandex Travel
        
        Args:
            summary: —Ç–µ–∫—Å—Ç —Å–∞–º–º–∞—Ä–∏ –ø–æ—Å—Ç–∞
            
        Returns:
            SummaryAnalysisResult: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å –≤–∞–∂–Ω–æ—Å—Ç—å—é –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
        """
        from config import ZELIBOBA_ANALYSIS_PROMPT
        
        try:
            analysis_result = await self.analyze_content(summary, ZELIBOBA_ANALYSIS_PROMPT)
            
            if analysis_result.get("status") == "success":
                analysis_text = analysis_result.get("analysis_text", "")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É –≤–∞–∂–Ω–æ—Å—Ç–∏ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
                importance_score = self._extract_importance_score(analysis_text)
                
                return SummaryAnalysisResult(
                    analysis=analysis_text,
                    importance_score=importance_score,
                    status="success"
                )
            else:
                return SummaryAnalysisResult(
                    analysis="",
                    importance_score=5.0,
                    status="error",
                    error=analysis_result.get("error", "Unknown error")
                )
                
        except Exception as e:
            return SummaryAnalysisResult(
                analysis="",
                importance_score=5.0,
                status="error",
                error=str(e)
            )
    
    @staticmethod
    def create_detailed_keyword_analysis(content: str, main_idea: str) -> tuple[str, float]:
        """
        –°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º—Ç–∞
        
        Args:
            content: —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å—Ç–∞
            main_idea: –≥–ª–∞–≤–Ω–∞—è –º—ã—Å–ª—å –ø–æ—Å—Ç–∞
            
        Returns:
            tuple[str, float]: –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –æ—Ü–µ–Ω–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏
        """
        content_lower = content.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        importance_keywords = {
            '–∞–≤–∏–∞': 8, '—Ä–µ–π—Å': 8, '–∞—ç—Ä–æ–ø–æ—Ä—Ç': 7, '–±–∏–ª–µ—Ç': 7, '—Å–∞–º–æ–ª–µ—Ç': 7, '–∞–≤–∏–∞–∫–æ–º–ø–∞–Ω': 8,
            '–æ—Ç–µ–ª—å': 9, '–≥–æ—Å—Ç–∏–Ω–∏—Ü': 9, '—Ä–∞–∑–º–µ—â–µ–Ω': 8, '–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω': 8, '–Ω–æ–º–µ—Ä': 7,
            '—Ç—É—Ä–∏–∑–º': 8, '–ø—É—Ç–µ—à–µ—Å—Ç–≤': 8, '—Ç—É—Ä–∏—Å—Ç': 7, '–ø–æ–µ–∑–¥–∫': 7, '–æ—Ç–¥—ã—Ö': 6,
            '–≤–∏–∑–∞': 9, '–±–µ–∑–≤–∏–∑–æ–≤': 9, '–≥—Ä–∞–Ω–∏—Ü–∞': 8, '–ø–∞—Å–ø–æ—Ä—Ç': 7, '–≤—ä–µ–∑–¥': 8, '–≤—ã–µ–∑–¥': 7,
            '—Ü–µ–Ω–∞': 7, '—Ç–∞—Ä–∏—Ñ': 7, '—Å–∫–∏–¥–∫–∞': 6, '—Å—Ç–æ–∏–º–æ—Å—Ç': 7, '–¥–æ—Ä–æ–≥': 6, '–¥–µ—à–µ–≤': 6,
            '–Ω–æ–≤—ã–π': 6, '–æ—Ç–∫—Ä—ã—Ç': 7, '–∑–∞–ø—Ä–µ—Ç': 9, '–æ–≥—Ä–∞–Ω–∏—á–µ–Ω': 8, '–∑–∞–∫—Ä—ã—Ç': 8,
            '—Ä–æ—Å—Å–∏—è': 8, '—Ä–æ—Å—Å–∏–π—Å–∫': 8, '—Ç—É—Ä—Ü–∏—è': 7, '–∫–∏—Ç–∞–π': 7, '–µ–≤—Ä–æ–ø–∞': 7, '—Å—à–∞': 7,
            'covid': 8, '–ø–∞–Ω–¥–µ–º': 8, '–∫–∞—Ä–∞–Ω—Ç–∏–Ω': 8, '–≤–∞–∫—Ü–∏–Ω': 7, '—Ç–µ—Å—Ç': 6,
            '—Å–∞–Ω–∫—Ü': 9, '–±–ª–æ–∫–∏—Ä': 8, '–∑–∞–ø—Ä–µ—â': 8, '–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤': 8
        }
        
        importance_score = 5.0
        matched_keywords = []
        
        for keyword, score in importance_keywords.items():
            if keyword in content_lower:
                importance_score = max(importance_score, score)
                matched_keywords.append(keyword)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º–∞—Ç–∏–∫—É –∏ —Å–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        if any(kw in content_lower for kw in ['–∞–≤–∏–∞', '—Ä–µ–π—Å', '–∞—ç—Ä–æ–ø–æ—Ä—Ç', '–±–∏–ª–µ—Ç', '—Å–∞–º–æ–ª–µ—Ç', '–∞–≤–∏–∞–∫–æ–º–ø–∞–Ω']):
            analysis_focus = '–∞–≤–∏–∞—Ü–∏–æ–Ω–Ω–æ–π –æ—Ç—Ä–∞—Å–ª–∏'
            opportunities = """- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è API –Ω–æ–≤—ã—Ö –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–π –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
- –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ "–ù–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã" —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
- –ó–∞–ø—É—Å–∫ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ —Ä–µ–π—Å–æ–≤
- –ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ —Å –ª–æ—É–∫–æ—Å—Ç–µ—Ä–∞–º–∏ –¥–ª—è —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤"""
            
            risks = """- –†–∏—Å–∫ –ø–æ—Ç–µ—Ä–∏ 20-30% –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ä–µ–π—Å–æ–≤
- –í–æ–∑–º–æ–∂–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ 15-25% –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏—é
- –ü–∞—Ä—Ç–Ω–µ—Ä—ã-–∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏ –º–æ–≥—É—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∏—Å—Å–∏–æ–Ω–Ω—ã–µ –≤ —Å—Ç–æ—Ä–æ–Ω—É —É–º–µ–Ω—å—à–µ–Ω–∏—è –Ω–∞ 2-5%"""
            
            user_impact = """- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–π—Å–∞—Ö
- –ò–∑–º–µ–Ω–∏—Ç—Å—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–∏—Å–∫–∞ - –¥–æ–±–∞–≤—è—Ç—Å—è —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ —Ç–∏–ø—É —Å–∞–º–æ–ª–µ—Ç–∞ –∏ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å SMS-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞ –¥–æ –≤—ã–ª–µ—Ç–∞ –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö"""
            
            partner_impact = """- –ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏ –¥–æ–ª–∂–Ω—ã –±—É–¥—É—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å real-time –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–π—Å–æ–≤
- –ò–∑–º–µ–Ω—è—Ç—Å—è API-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ - –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π
- –ù–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—é –ø–æ–ª–µ—Ç–æ–≤ —É–≤–µ–ª–∏—á–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –Ω–∞ 3-7%"""
            
            recommendations = """- –í —Ç–µ—á–µ–Ω–∏–µ 2 –Ω–µ–¥–µ–ª—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö –∞–≤–∏–∞–º–∞—Ä—à—Ä—É—Ç–æ–≤
- –ü—Ä–æ–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã —Å —Ç–æ–ø-10 –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è–º–∏ –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞ –æ –Ω–æ–≤—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
- –ó–∞–ø—É—Å—Ç–∏—Ç—å A/B —Ç–µ—Å—Ç –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–∏—Å–∫–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤ –¥–ª—è 10% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –°–æ–∑–¥–∞—Ç—å FAQ-—Ä–∞–∑–¥–µ–ª "–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∞–≤–∏–∞–ø–µ—Ä–µ–≤–æ–∑–∫–∞—Ö" –¥–æ 15 —á–∏—Å–ª–∞"""
            
            competitiveness = f"""Aviasales –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –±–ª–∞–≥–æ–¥–∞—Ä—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º, –Ω–æ —É –Ø–Ω–¥–µ–∫—Å –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±–æ–π—Ç–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∑–∞ —Å—á–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —ç–∫–æ—Å–∏—Å—Ç–µ–º–æ–π –Ø–Ω–¥–µ–∫—Å–∞ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
            
        elif any(kw in content_lower for kw in ['–æ—Ç–µ–ª—å', '–≥–æ—Å—Ç–∏–Ω–∏—Ü', '—Ä–∞–∑–º–µ—â–µ–Ω', '–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω']):
            analysis_focus = '–≥–æ—Å—Ç–∏–Ω–∏—á–Ω–æ–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏'
            opportunities = """- –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å–µ—Ç–∏ –Ω–∞ 500+ –Ω–æ–≤—ã—Ö –æ—Ç–µ–ª–µ–π –≤ —Ä–µ–≥–∏–æ–Ω–µ
- –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø—Ä–æ—Å–∞
- –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ "–Ø–Ω–¥–µ–∫—Å.–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ü–ª—é—Å" —Å –∫—ç—à–±—ç–∫–æ–º 3-5%
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö —Ç—É—Ä–æ–≤ –ø–æ –Ω–æ–º–µ—Ä–∞–º –æ—Ç–µ–ª–µ–π"""
            
            risks = """- –†–∏—Å–∫ —Å–Ω–∏–∂–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏ —Å–µ—Ç–∏ –Ω–∞ 15-20%
- –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–≤–µ—Ä–±—É–∫–∏–Ω–≥–æ–º –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º —Å–ø—Ä–æ—Å–µ - –ø–æ—Ç–µ—Ä—è –¥–æ 5% –∫–ª–∏–µ–Ω—Ç–æ–≤
- –ü–∞—Ä—Ç–Ω–µ—Ä—ã –º–æ–≥—É—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å —Å–Ω–∏–∂–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–∏ —Å 12% –¥–æ 8-10%"""
            
            user_impact = """- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ—Å–º–æ—Ç—Ä–∞ –Ω–æ–º–µ—Ä–æ–≤ –ø–µ—Ä–µ–¥ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
- –ò–∑–º–µ–Ω–∏—Ç—Å—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–∑—ã–≤–æ–≤ - –¥–æ–±–∞–≤–∏—Ç—Å—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Ñ–æ—Ç–æ —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
- –í–Ω–µ–¥—Ä–µ–Ω–∏–µ —á–∞—Ç-–±–æ—Ç–∞ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é –≤ —Ä–µ–∂–∏–º–µ 24/7"""
            
            partner_impact = """- –û—Ç–µ–ª—è–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é –Ω–æ–º–µ—Ä–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
- –ù–æ–≤—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã —Ñ–æ—Ç–æ—Å—ä–µ–º–∫–∏ –Ω–æ–º–µ—Ä–æ–≤ - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –∫–∞–∂–¥—ã–µ 6 –º–µ—Å—è—Ü–µ–≤
- –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É–Ω–∫—Ç–æ–≤ –æ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –∑–∞ –æ–≤–µ—Ä–±—É–∫–∏–Ω–≥ –¥–æ 200% —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞"""
            
            recommendations = """- –ü—Ä–æ–≤–µ—Å—Ç–∏ –∞—É–¥–∏—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –≤—Å–µ—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤-–æ—Ç–µ–ª–µ–π –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞
- –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∏–ª–æ—Ç–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Å 50 –æ—Ç–µ–ª—è–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤
- –°–æ–∑–¥–∞—Ç—å call-—Ü–µ–Ω—Ç—Ä –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
- –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–µ–ª—å–µ—Ä–æ–≤ –¥–æ –∫–æ–Ω—Ü–∞ –∫–≤–∞—Ä—Ç–∞–ª–∞"""
            
            competitiveness = f"""Booking.com —Å–æ—Ö—Ä–∞–Ω–∏—Ç –ª–∏–¥–µ—Ä—Å—Ç–≤–æ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—ä–µ–∫—Ç–æ–≤, –Ω–æ –Ø–Ω–¥–µ–∫—Å –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –º–æ–∂–µ—Ç –≤—ã–∏–≥—Ä–∞—Ç—å –∑–∞ —Å—á–µ—Ç –ª—É—á—à–µ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞–º–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–µ–∑–¥–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            
        elif any(kw in content_lower for kw in ['–≤–∏–∑–∞', '–±–µ–∑–≤–∏–∑–æ–≤', '–≥—Ä–∞–Ω–∏—Ü–∞', '–ø–∞—Å–ø–æ—Ä—Ç', '–≤—ä–µ–∑–¥']):
            analysis_focus = '–≤–∏–∑–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü'
            opportunities = """- –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç—ã –≤–∏–∑–æ–≤—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π —Å real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
- –ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ —Å –≤–∏–∑–æ–≤—ã–º–∏ —Ü–µ–Ω—Ç—Ä–∞–º–∏ –¥–ª—è –æ–Ω–ª–∞–π–Ω-–ø–æ–¥–∞—á–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ "–í–∏–∑–æ–≤—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç" —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–æ—Ä—Ç–∞–ª–∞–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–∑—ã"""
            
            risks = """- –†–∏—Å–∫ –ø–æ—Ç–µ—Ä–∏ 40-60% –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –≤ —Å—Ç—Ä–∞–Ω—ã —Å –Ω–æ–≤—ã–º–∏ –≤–∏–∑–æ–≤—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
- –ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ 195 —Å—Ç—Ä–∞–Ω–∞—Ö –º–∏—Ä–∞
- –í–æ–∑–º–æ–∂–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã –¥–æ 500,000 —Ä—É–±–ª–µ–π –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ–π –≤–∏–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
            
            user_impact = """- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤–∏–∑–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∑–∞ 30 –¥–Ω–µ–π –¥–æ –ø–æ–µ–∑–¥–∫–∏
- –î–æ–±–∞–≤–∏—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–∑–æ–≤—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø—Ä–∏ –∫–∞–∂–¥–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Å—Ä–æ–∫–∞—Ö –ø–æ–¥–∞—á–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –≤–∏–∑—É"""
            
            partner_impact = """- –¢—É—Ä–æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—É–¥—É—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–∑–æ–≤—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
- –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è - –ø–æ–∫—Ä—ã—Ç–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –≤ –≤–∏–∑–µ –¥–æ 100,000 —Ä—É–±–ª–µ–π
- –ù–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≥–∏–¥–∞–º - —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –≤–∏–∑–æ–≤–æ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É"""
            
            recommendations = """- –°–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤–∏–∑–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –Ω–µ–¥–µ–ª—å
- –ó–∞–∫–ª—é—á–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä—ã —Å –≤–∏–∑–æ–≤—ã–º–∏ —Ü–µ–Ω—Ç—Ä–∞–º–∏ –≤ 20 –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö –†–æ—Å—Å–∏–∏
- –ó–∞–ø—É—Å—Ç–∏—Ç—å email-—Ä–∞—Å—Å—ã–ª–∫—É –æ –≤–∏–∑–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –¥–ª—è 100,000 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —á–µ–∫-–ª–∏—Å—Ç –≤–∏–∑–æ–≤—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω—ã"""
            
            competitiveness = f"""–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –ø—Ä–∏ –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫ –≤–∏–∑–æ–≤—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º, –Ω–æ –Ø–Ω–¥–µ–∫—Å –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –º–æ–∂–µ—Ç –≤—ã–∏–≥—Ä–∞—Ç—å –∑–∞ —Å—á–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –Ø–Ω–¥–µ–∫—Å.–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–º –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            
        else:
            analysis_focus = '—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏'
            opportunities = """- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –Ø–Ω–¥–µ–∫—Å–µ
- –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –ó–∞–ø—É—Å–∫ —Ä–∞–∑–¥–µ–ª–∞ "–°–∫—Ä—ã—Ç—ã–µ –∂–µ–º—á—É–∂–∏–Ω—ã" —Å –º–∞–ª–æ–∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –Ø–Ω–¥–µ–∫—Å.–ü–æ–≥–æ–¥–æ–π –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–µ–∑–¥–æ–∫"""
            
            risks = """- –ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –±—ã—Å—Ç—Ä–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫ –∏–∑–º–µ–Ω—è—é—â–∏–º—Å—è —Ç—Ä–µ–Ω–¥–∞–º - –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –¥–æ 5 –º–ª–Ω —Ä—É–±–ª–µ–π –≤ –∫–≤–∞—Ä—Ç–∞–ª
- –†–∏—Å–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π - –ø–æ—Ç–µ—Ä—è –¥–æ 10% –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
- –í–æ–∑–º–æ–∂–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –Ω–æ–≤—ã–º–∏ –Ω–∏—à–µ–≤—ã–º–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏"""
            
            user_impact = """- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–µ–∑–¥–æ–∫ –∏ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
- –î–æ–±–∞–≤–∏—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è "–°–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–µ–∑–¥–∫—É –∑–∞ 5 –º–∏–Ω—É—Ç" —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–¥–±–æ—Ä–æ–º –≤—Å–µ—Ö —É—Å–ª—É–≥
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–µ–ª–∏—Ç—å—Å—è –ø–ª–∞–Ω–∞–º–∏ –ø–æ–µ–∑–¥–æ–∫ —Å –¥—Ä—É–∑—å—è–º–∏"""
            
            partner_impact = """- –ü–∞—Ä—Ç–Ω–µ—Ä–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ —É—Å–ª—É–≥–∞–º
- –ù–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Ñ–æ—Ç–æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
- –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ - —É—á–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π"""
            
            recommendations = """- –ü—Ä–æ–≤–µ—Å—Ç–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤ —Ç—É—Ä–∏–∑–º–∞ —Å—Ä–µ–¥–∏ 10,000 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞
- –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–µ—Ç–∞-–≤–µ—Ä—Å–∏—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è 5% –∞—É–¥–∏—Ç–æ—Ä–∏–∏
- –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –¥–ª—è 100 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫–≤–∞—Ä—Ç–∞–ª
- –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
            
            competitiveness = f"""TripAdvisor –∏ GetYourGuide –º–æ–≥—É—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ, –Ω–æ –Ø–Ω–¥–µ–∫—Å –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –º–æ–∂–µ—Ç –≤—ã–∏–≥—Ä–∞—Ç—å –∑–∞ —Å—á–µ—Ç –≥–ª—É–±–æ–∫–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —ç–∫–æ—Å–∏—Å—Ç–µ–º–æ–π –Ø–Ω–¥–µ–∫—Å–∞, –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –æ—Ç –ø–æ–∏—Å–∫–∞ –¥–æ –æ–ø–ª–∞—Ç—ã"""
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        analysis = f"""–ö–†–ê–¢–ö–û–ï –†–ï–ó–Æ–ú–ï: {main_idea}

–í–õ–ò–Ø–ù–ò–ï –ù–ê YANDEX TRAVEL:

–í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
{opportunities}

–†–ò–°–ö–ò:
{risks}

–í–õ–ò–Ø–ù–ò–ï –ù–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:
{user_impact}

–í–õ–ò–Ø–ù–ò–ï –ù–ê –ü–ê–†–¢–ù–ï–†–û–í:
{partner_impact}

–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
{recommendations}

–í–õ–ò–Ø–ù–ò–ï –ù–ê –ö–û–ù–ö–£–†–ï–ù–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–¨:
{competitiveness}

–í–ê–ñ–ù–û–°–¢–¨: {importance_score}/10"""
        
        return analysis, importance_score
    
    def _extract_importance_score(self, analysis_text: str) -> float:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Ü–µ–Ω–∫—É –≤–∞–∂–Ω–æ—Å—Ç–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        import re
        
        # –ò—â–µ–º –æ—Ü–µ–Ω–∫—É –≤–∞–∂–Ω–æ—Å—Ç–∏ –≤ —Ç–µ–∫—Å—Ç–µ
        patterns = [
            r'–≤–∞–∂–Ω–æ—Å—Ç—å[:\s]*(\d+(?:\.\d+)?)',
            r'–æ—Ü–µ–Ω–∫–∞[:\s]*(\d+(?:\.\d+)?)',
            r'–±–∞–ª–ª[:\s]*(\d+(?:\.\d+)?)',
            r'(\d+(?:\.\d+)?)\s*–∏–∑\s*10',
            r'(\d+(?:\.\d+)?)/10'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, analysis_text.lower())
            if match:
                try:
                    score = float(match.group(1))
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ —à–∫–∞–ª–µ 1-10
                    return max(1.0, min(10.0, score))
                except ValueError:
                    continue
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —á–∏—Å–ª–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        analysis_lower = analysis_text.lower()
        
        if any(word in analysis_lower for word in ['–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ', '–∫—Ä–∞–π–Ω–µ –≤–∞–∂–Ω–æ', '–≤—ã—Å–æ–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å']):
            return 9.0
        elif any(word in analysis_lower for word in ['–æ—á–µ–Ω—å –≤–∞–∂–Ω–æ', '–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ']):
            return 8.0
        elif any(word in analysis_lower for word in ['–≤–∞–∂–Ω–æ', '—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ']):
            return 7.0
        elif any(word in analysis_lower for word in ['—É–º–µ—Ä–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ', '—Å—Ä–µ–¥–Ω–µ–µ –≤–ª–∏—è–Ω–∏–µ']):
            return 6.0
        elif any(word in analysis_lower for word in ['–º–∞–ª–æ–∑–Ω–∞—á–∏–º–æ', '–Ω–∏–∑–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ']):
            return 4.0
        elif any(word in analysis_lower for word in ['–Ω–µ–∑–Ω–∞—á–∏–º–æ', '–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ']):
            return 3.0
        else:
            return 5.0  # –°—Ä–µ–¥–Ω—è—è –≤–∞–∂–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

@dataclass
class SummaryAnalysisResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–∞–º–º–∞—Ä–∏"""
    analysis: str
    importance_score: float
    status: str
    error: Optional[str] = None

@dataclass
class PostSummary:
    """–ú–æ–¥–µ–ª—å —Å–∞–º–º–∞—Ä–∏ –ø–æ—Å—Ç–∞"""
    channel_id: int
    telegram_message_id: int
    summary: str
    main_idea: str
    date_published: datetime
    sender_name: Optional[str] = None
    sender_id: Optional[int] = None
    views_count: int = 0
    forwards_count: int = 0
    replies_count: int = 0
    channel_name: Optional[str] = None
    id: Optional[int] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
